AWSTemplateFormatVersion: 2010-09-09
Description: Create AWS CloudFormation Customize Virtual Private Cloud

Parameters:
  AmiId:
    Type: "AWS::EC2::Image::Id"
    Description: ami-id

  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 60.69.204.19/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

# https://qiita.com/rammesh/items/22bab12455b18eda7e49#vpc%E4%BD%9C%E6%88%90public%E5%8F%8A%E3%81%B3private%E3%82%B5%E3%83%96%E3%83%8D%E3%83%83%E3%83%88
Resources:
  # --------------------
  # IAM Role for EC2 CodeDeploy
  # --------------------
  CodeDeployDemoIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeDeploy-demo-IAMRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  # --------------------
  # IAM Policy for EC2 CodeDeploy
  # --------------------
  CodeDeployDemoIAMPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CodeDeploy-demo-IAMPolicy
      Roles:
        - Ref: CodeDeployDemoIAMRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Resource: "*"
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
  # --------------------
  # IAM Instance Profile for EC2 CodeDeploy
  # --------------------
  CodeDeployDemoIAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: CodeDeployDemoIAMRole

  # --------------------
  # VIRTUAL PRIVATE CLOUD
  # --------------------
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: example-vpc

  # --------------------
  # Subnet - Public
  # --------------------
  SubnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: vpc-public-subnet-1a

  SubnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      # https://qiita.com/ksato2032/items/98b76d4ccaa1a5641fc8
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: vpc-public-subnet-1c

  # --------------------
  # Subnet - Private
  # --------------------
  SubnetPrivate1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: vpc-private-subnet-1a

  SubnetPrivate2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      # https://zenn.dev/hassaku63/articles/11f005e42c701bf3b37f
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: vpc-private-subnet-1c

  # --------------------
  # RouteTable
  # --------------------
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: Network
          Value: Public

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## Associate the subnet to the route table
  PublicSubnetRouteTableAssociatio1a:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1c:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref PublicRouteTable

  # --------------------
  # InternetGateway
  # --------------------
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: vpc-igwg

  # --------------------
  # VPC Gateway Attachment
  # --------------------
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # --------------------
  # Network ACL
  # --------------------
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC

  PublicNetworkInboudAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false # Ingress
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicNetworkOutboudAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true # Engress
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicSubnetNetworkAclAssociatio1a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociatio1d:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic2
      NetworkAclId: !Ref PublicNetworkAcl

  # --------------------
  # Security Group for ELB
  # --------------------
  SecurityGroupELB:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupName: SecurityGroupELB
      GroupDescription: Enable HTTP/HTTPS access via port 80,443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

  # --------------------
  # Security Group for EC2
  # --------------------
  SecurityGroupEC2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupName: SecurityGroupEC2
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # --------------------
  # Load Balancer (Application Load Balancer)
  # --------------------
  InternetELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      # Name: ""
      IpAddressType: "ipv4"
      SecurityGroups:
        - !Ref SecurityGroupELB
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
      Type: application

  InternetELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Name: MyTargerGroup
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  InternetELBListnerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InternetELBTargetGroup
      LoadBalancerArn: !Ref InternetELB
      Port: 80
      Protocol: HTTP

  InternetELBListnerHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InternetELBTargetGroup
      LoadBalancerArn: !Ref InternetELB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: "arn:aws:acm:ap-northeast-1:377262267246:certificate/b0a4e848-f816-4c71-bb0c-dc09fb88cf1d"

  # --------------------
  # EC2 Instance
  # --------------------
  EC2Instance1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref CodeDeployDemoIAMInstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroupEC2
      SubnetId: !Ref SubnetPublic1
      InstanceType: t3.micro
      KeyName: 20200527-devepment
      Tags:
        - Key: Name
          Value: demo
        - Key: InstanceName
          Value: amzn2-ami-hvm-2.0.20201126.0-x86_64-gp2

  EC2Instance2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref CodeDeployDemoIAMInstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroupEC2
      SubnetId: !Ref SubnetPublic2
      InstanceType: t3.micro
      KeyName: 20200527-devepment
      Tags:
        - Key: Name
          Value: demo
        - Key: InstanceName
          Value: amzn2-ami-hvm-2.0.20201126.0-x86_64-gp2
  # --------------------
  # Auto Scaling
  # --------------------
  # LaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     AssociatePublicIpAddress: true
  #     ImageId: !Ref AmiId #amzn2-ami-hvm-2.0.20201126.0-x86_64-gp2
  #     InstanceMonitoring: false
  #     InstanceType: t3.micro
  #     KeyName: 20200527-devepment
  #     LaunchConfigurationName: LaunchConfigurationNamed20201203
  #     SecurityGroups:
  #       - !Ref SecurityGroupEC2
  # AutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     AutoScalingGroupName: AutoScalingGroup
  #     DesiredCapacity: "2"
  #     LaunchConfigurationName:
  #       Ref: LaunchConfiguration
  #     MaxSize: "2"
  #     MinSize: "0"
  #     Tags:
  #       - Key: Name
  #         PropagateAtLaunch: true
  #         Value: instancename
  #     VPCZoneIdentifier:
  #       - !Ref SubnetPublic1
  #       - !Ref SubnetPublic2
