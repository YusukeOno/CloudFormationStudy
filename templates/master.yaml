AWSTemplateFormatVersion: 2010-09-09
Description: Create AWS CloudFormation Customize Virtual Private Cloud

# https://qiita.com/rammesh/items/22bab12455b18eda7e49#vpc%E4%BD%9C%E6%88%90public%E5%8F%8A%E3%81%B3private%E3%82%B5%E3%83%96%E3%83%8D%E3%83%83%E3%83%88
Resources:
  ## VPCの作成をする
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: example-vpc

  ## MultiAZに配置するための複数のPublicサブネット(SubnetPublic1とSubnetPublic2)の作成
  SubnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: example-vpc-public-subnet-1a

  SubnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      # https://qiita.com/ksato2032/items/98b76d4ccaa1a5641fc8
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: example-vpc-public-subnet-1d

  ## MultiAZに配置するための複数のPrivateサブネット(SubnetPrivate1とSubnetPrivate2)の作成
  SubnetPrivate1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: example-vpc-private-subnet-1a

  SubnetPrivate2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      # https://zenn.dev/hassaku63/articles/11f005e42c701bf3b37f
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: example-vpc-private-subnet-1d

  ## InternetGatewayの作成
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: example-vpc-igwg

  ## VPC にゲートウェイをアタッチします。
  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## VPC内に新しいルートテーブルの作成
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Network
          Value: Public

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ## サブネットをルートテーブルに関連付ける
  PublicSubnetRouteTableAssociatio1a:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1c:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref PublicRouteTable

  ## Vpcに新しいネットワークACLの作成
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC

  PublicNetworkInboudAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicNetworkOutboudAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  PublicSubnetNetworkAclAssociatio1a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociatio1d:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SubnetPublic2
      NetworkAclId: !Ref PublicNetworkAcl

  ## SecurityGroupの作成
  ### for ELB
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP/HTTPS access via port 80,443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  ### for EC2
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ## Internet ELB
  InternetELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      Instances:
        - !Ref EC2Instance1
        - !Ref EC2Instance2
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2

  ## EC2インスタンスの作成
  EC2Instance1:
    Type: "AWS::EC2::Instance"
    Metadata:
      # https://www.royozaki.net/archives/909
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
            files:
              /var/www/html/phpinfo.php:
                content: |
                  <?php
                    phpinfo();
                  ?>
                mode: "000644"
                owner: apache
                group: apache
            services:
              sysvinit:
                httpd:
                  enabled: true
                  ensureRunning: true
    Properties:
      ImageId: ami-00f045aed21a55240
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetPublic1
      InstanceType: t3.micro
      KeyName: 20200527-devepment
      Tags:
        - Key: Name
          Value: demo
        - Key: InstanceName
          Value: amzn2-ami-hvm-2.0.20201126.0-x86_64-gp2
      # https://qiita.com/blackpeach7/items/6cc67e19add848811a2d
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello World from user data" > /var/www/html/index.html

  EC2Instance2:
    Type: "AWS::EC2::Instance"
    Metadata:
      # https://www.royozaki.net/archives/909
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
            files:
              /var/www/html/phpinfo.php:
                content: |
                  <?php
                    phpinfo();
                  ?>
                mode: "000644"
                owner: apache
                group: apache
            services:
              sysvinit:
                httpd:
                  enabled: true
                  ensureRunning: true
    Properties:
      ImageId: ami-00f045aed21a55240
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetPublic2
      InstanceType: t3.micro
      KeyName: 20200527-devepment
      Tags:
        - Key: Name
          Value: demo
        - Key: InstanceName
          Value: amzn2-ami-hvm-2.0.20201126.0-x86_64-gp2
      # https://qiita.com/blackpeach7/items/6cc67e19add848811a2d
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello World from user data" > /var/www/html/index.html

  EC2Instance1EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref EC2Instance1
  EC2Instance2EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref EC2Instance2
